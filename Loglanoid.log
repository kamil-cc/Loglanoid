program Loglanoid;
(**)
(* Loglanoid is an arkanoid-like game written using Loglan82 language.  *)
(* Copyright (C) 2013  Kamil Burzynski,  burzynski.kamil@gmail.com      *)
(*                                                                      *)
(* This program is free software: you can redistribute it and/or modify *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 3 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* This program is distributed in the hope that it will be useful,      *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with this program.  If not, see http://www.gnu.org/licenses/   *)
(**)
#include "classes/gui.inc"
(*Dimensions. A lot of important constans.*)
const brickHeight = 16, brickWidth = 30, halfBrickHeight = brickHeight/2, 
halfBrickWidth = brickWidth/2, brickRows = 10, ballDim = 8, 
halfBallDim = ballDim/2, paddleHeight = 8, paddleWidth = 50, 
halfPaddleWidth = paddleWidth/2, brickCollisionX = halfBallDim + halfBrickWidth, 
brickCollisionY = halfBallDim + halfBrickHeight,
paddleCollision = halfPaddleWidth + halfBallDim, 
winWidth = 320, winHeight = 240, menuHeight = 120, menuWidth = 285,
paddleY1 = winHeight - (paddleHeight + 1), paddleY2 = winHeight - 1,
criticalLeft = halfBallDim + 1, criticalRight = winWidth - (halfBallDim + 1), 
criricalUp = halfBallDim + 1, criticalDown = winHeight - (paddleHeight + halfBallDim + 1),
paddleLeftBorder = 1 + halfPaddleWidth, 
paddleRightBorder = winWidth - (1 + halfPaddleWidth);
(*Game configuration parameters.*)
const speedRatio = 1, defaultSpeed = 30, minSpeed = 1, maxSpeed = 100, 
paddleDisplacement = 2, paddleStep = paddleDisplacement * speedRatio;
(*Colors*)
const bgColor = 7, borderColor = 0, ballColor = 15, paddleColor = 4,
infoBgColor = 6, infoFgColor = 1, infoTextColor = 15;
(*Files*)
const brickBlueImg = "examp/brick.bmp";
(*Strings*)
const helloMsg1 ="Loglanoid is a simple game",
helloMsg2 = "written in Loglan.", steeringMsg1 = "[ENTER] start game",
steeringMsg2 = "[SPACE] configuration", steeringMsg3 = "[ESC]   quit",
configureMsg1 = "Enter new speed value,", configureMsg2 = "then press [ENTER]",
configureMsg3 = "30  default value", configureMsg4 = "1   maximum speed",
configureMsg5 = "100 minimum speed", winner="WINNER!", gameOver = "GAME OVER!";
(*Prefix for brick and emptyBrick classes.*)
unit prefixBrick:GUI class(xleft, ytop:integer);
unit virtual collisionDetect:procedure;
begin
end collisionDetect;
begin
end prefixBrick;
(*Single brick class.*)
unit brick:prefixBrick class;
var x, y, x1, y1, x2, y2:integer; (*Brick coordinates.*)
var distanceX, distanceY:integer; (*Distance between brick and ball.*)
var difX, difY:integer;
(*Check collision between single brick and ball.*)
unit virtual collisionDetect:procedure;
begin
 distanceX := abs(x - gBall.x);
 distanceY := abs(y - gBall.y);
 if (distanceX < brickCollisionX) and (distanceY < brickCollisionY) then
  call destroyBrick;
  (*Collision mechanism*)
  difX := distanceX - brickCollisionX;
  difY := distanceY - brickCollisionY;
  if difX<difY then
   call gBall.oppositeVecY;
  else
   call gBall.oppositeVecX;
  fi;
  brickCollision := true;
 fi;
end collisionDetect;
(*Move single brick down by given offset in pixels.*)
unit move:procedure(offset:integer);
begin
 (*Not implemented yet.*)
end move;
(*Erase brick from the game board.*)
unit destroyBrick:procedure;
begin
 call GUI_Rect(x1, y1, x2, y2, bgColor, bgColor);
end destroyBrick;
begin
 x1 := xleft;
 y1 := ytop;
 x := x1 + halfBrickWidth;
 y := y1 + halfBrickHeight;
 x2 := x1 + brickWidth;
 y2 := y1 + brickHeight;
 call GUI_PutImgFile(x1, y1, brickBlueImg);
 return;
end brick;
(*Dummy class.*)
unit emptyBrick:prefixBrick class;
unit virtual collisionDetect:procedure;
begin
end collisionDetect;
begin
 return;
end emptyBrick;
(*Class holding all bricks.*)
unit bricks:GUI class;
var bricksSum, yOffset, xOffset, bricksAmount:integer;
var xPosition, yPosition, i, j, k, l, counter:integer;
var bricksArray:arrayof prefixBrick;
var ballX, ballY:integer; (*Ball coordinates.*)
(*Check all bricks for collision with ball *)
unit collisionDetect:procedure;
begin
 ballX := gBall.x;
 ballY := gBall.y;
 for l := 1 to bricksSum do
  call bricksArray(l).collisionDetect;
  if brickCollision then
   kill(bricksArray(l));
   bricksArray(l) := new emptyBrick(0, 0);
   brickCollision := false;
   counter := counter - 1;
   if counter=0 then
     call game.pauseFor2(300);
     call game.displayEndMsg(winner);
   fi;
  fi;
 od;
end collisionDetect;
(*Move all bricks down, offset in pixels.*)
unit move:procedure(offset:integer);
begin
 (*Not implemented yet.*)
end move;
begin
 (*The sum of arithmetic progression.*)
 bricksSum := ((1+brickRows)/2)*brickRows;
 array bricksArray dim(1:bricksSum);
 yOffset := 2;
 j := 0;
 k := 1;
 (*Calculating coordinates of bricks.*)
 while j<brickRows do
  yPosition := (j*(brickHeight+1)) + yOffset;
  bricksAmount := (winWidth/brickWidth) - j;
  xOffset := (winWidth - (bricksAmount*(brickWidth+1)))/2;
  i := 0;
  while i<bricksAmount do
   xPosition := xOffset + (i*(brickWidth+1));
   (*Drawing bricks.*)
   bricksArray(k) := new brick(xPosition, yPosition);
   k := k + 1;
   i := i + 1;
  od;
  j := j + 1;
 od;
 counter := bricksSum;
 return;
end bricks;
(*Class holding a ball.*)
unit ball:GUI class;
var x, y:integer; (*Center coordinates.*)
var x1, x2, y1, y2:integer; (*Edge coordinates.*)
var vecX, vecY:integer; (*Displacement vectors.*)
var seed, rnd:real; (*Variables for random generator.*)
var axeX, axeY:integer; (*Variables for procedure move.*)
var direction, collisionDistance, collisionPoint:integer;
unit move:procedure;
begin
 axeX := x + VecX;
 if axeX<=criticalLeft then (*Collision with left border.*)
  x := criticalLeft;
  call gBall.oppositeVecX;
 else
  if axeX>criticalRight then (*Collision with right border.*)
   x:= criticalRight;
   call gBall.oppositeVecX;
  else (*No horizontal collision*)
   x:= axeX;
  fi;
 fi;
 axeY := y + VecY;
 if axeY<criricalUp then (*Collision with top border*)
  y := criricalUp;
  call gBall.oppositeVecY;
 else
  if axeY >= criticalDown then 
   (*Possible collision with paddle, continue checking.*)
   collisionDistance := abs(x - gPaddle.x);
   if collisionDistance<paddleCollision then (*Collision with paddle.*)
    y := criticalDown;
    call changeVectors;
   else
    y := criticalDown + halfBallDim;
    call refresh;
    call game.pauseFor2(300);
    call game.displayEndMsg(gameOver); (*Ball is under paddle, game over.*)
   fi;
  else (*No vertical collision.*)
   y := axeY;
  fi;
 fi;
 call refresh;
end move;
(*Calculate new displacement vectors after hitting the paddle. Fancy algorithm.*)
unit changeVectors:procedure;
begin
 rnd := random;
 vecY := round(-2.0 * rnd) - 1; (*Might be (-3*rnd)-1 *)
 (*Collision point not implemented yet.*)
 (*collisionPoint := gBall.x - gPaddle.x;*)
 direction := gPaddle.x - gPaddle.oldX;
 rnd := random;
 if direction=0 then (*Paddle do not move.*)
  vecX:= round(2.0 * rnd) - 1;
 else
  if direction<0 then (*Paddle move into left.*)
   vecX := round(-2.0 * rnd) - 1; (*Might be (-3*rnd)-1 *)
  else (*Paddle move into right.*)
   vecX := round(2.0 * rnd) + 1; (*Might be (3*rnd)+1 *)
  fi;
 fi;
 vecX := speedRatio * vecX; (*Speed UP!*)
 vecY := speedRatio * vecY; (*Speed UP!*)
end changeVectors;
unit oppositeVecX:procedure;
begin
 vecX := - vecX;
end;
unit oppositeVecY:procedure;
begin
 vecY := - vecY;
end;
(*Repainting ball.*)
unit refresh:procedure;
begin
 call GUI_Rect(x1, y1, x2, y2, bgColor, bgColor);
 (*Calculating coordinates.*)
 x1 := x - halfBallDim;
 x2 := x + halfBallDim;
 y1 := y - halfBallDim;
 y2 := y + halfBallDim;
 call GUI_Rect(x1, y1, x2, y2, borderColor, ballColor);
end;
begin
 (*Calculate coordinates.*)
 seed := time;
 call ranset(seed);
 rnd := random;
 vecX := round(6.0 * rnd) - 3; (*Might be (8*rnd)-4 *)
 rnd := random;
 vecY := round(-2.0 * rnd) - 1; (*Might be (-3*rnd)-1 *)
 vecX := speedRatio * vecX; (*Speed UP!*)
 vecY := speedRatio * vecY; (*Speed UP!*)
 x := winWidth/2;
 y := winHeight - (halfBallDim) - (paddleHeight + 1);
 x1 := x - halfBallDim; (*Left*)
 x2 := x + halfBallDim; (*Right*)
 y1 := y - halfBallDim; (*Up*)
 y2 := y + halfBallDim; (*Down*)
 (*Draw the ball.*)
 call GUI_Rect(x1, y1, x2, y2, borderColor, ballColor);
 return;
end ball;
(**)
unit paddle:GUI class;
var x, oldX:integer; (*Center coordinates.*)
var x1, x2:integer; (*Edge coordinates.*)
var diff:integer; (*Variables for move procedure.*)
unit move:procedure;
begin
 oldX := x;
 if key = -25 then (*Move left.*)
  call GUI_Rect(x1, paddleY1, x2, paddleY2, bgColor, bgColor); 
  diff := x - paddleStep;
  if diff<paddleLeftBorder then 
   x := paddleLeftBorder;
  else
   x := diff;
  fi;
  x1 := x - halfPaddleWidth;
  x2 := x + halfPaddleWidth;
  call GUI_Rect(x1, paddleY1, x2, paddleY2, borderColor, paddleColor);
 fi;
 if key = -26 then (*Move right.*)
  call GUI_Rect(x1, paddleY1, x2, paddleY2, bgColor, bgColor); 
  diff := x + paddleStep;
  if diff>paddleRightBorder then 
   x := paddleRightBorder;
  else
   x := diff;
  fi;
  x1 := x - halfPaddleWidth;
  x2 := x + halfPaddleWidth;
  call GUI_Rect(x1, paddleY1, x2, paddleY2, borderColor, paddleColor);
 fi;
end move;
(**)
begin
 x,oldX := winWidth/2;
 x1 := x - halfPaddleWidth;
 x2 := x + halfPaddleWidth;
 call GUI_Rect(x1, paddleY1, x2, paddleY2, borderColor, paddleColor);
 return;
end paddle;
(**)
unit gameBoard:GUI class;
var i, tmp:integer; (*Variables for pauseFor procedure*)
unit info:procedure(output key:integer);
var tmpHeight, tmpWidth:integer;
begin
 call GUI_Clear;
 call GUI_Rect(0, 0, winWidth, winHeight, borderColor, infoBgColor);
 tmpHeight := (winHeight - menuHeight)/2;
 tmpWidth := (winWidth - menuWidth)/2;
 call GUI_Rect(tmpWidth, tmpHeight, winWidth - tmpWidth, 
 winHeight - tmpHeight, borderColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 37), (winHeight/2) - 50, 
 unpack(helloMsg1), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 71), (winHeight/2) - 35, 
 unpack(helloMsg2), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 58), (winHeight/2) - 10, 
 unpack(steeringMsg1), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 58), (winHeight/2) + 5 , 
 unpack(steeringMsg2), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 58), (winHeight/2) + 20, 
 unpack(steeringMsg3), infoTextColor, infoFgColor);
 key := 0;
 while key=0 do
  key := inkey;
 od;
end info;
(**)
unit configure:procedure(output key:integer);
var tmpHeight, tmpWidth:integer;
begin
 call GUI_Clear;
 call GUI_Rect(0, 0, winWidth, winHeight, borderColor, infoBgColor);
 tmpHeight := (winHeight - menuHeight)/2;
 tmpWidth := (winWidth - menuWidth)/2;
 call GUI_Rect(tmpWidth, tmpHeight, winWidth - tmpWidth, 
 winHeight - tmpHeight, borderColor, infoFgColor);
 call GUI_Rect(tmpWidth, tmpHeight, winWidth - tmpWidth, 
 winHeight - tmpHeight, borderColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 53), (winHeight/2) - 55, 
 unpack(configureMsg1), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 63), (winHeight/2) - 40, 
 unpack(configureMsg2), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 70), (winHeight/2), 
 unpack(configureMsg3), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 70), (winHeight/2) + 15, 
 unpack(configureMsg4), infoTextColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 70), (winHeight/2) + 30 , 
 unpack(configureMsg5), infoTextColor, infoFgColor);
 key := GUI_ReadInt(140,(winHeight/2) - 20, infoTextColor, infoFgColor);
 if key<1 then key := minSpeed fi;
 if key>100 then key := maxSpeed fi;
end configure;
(**)
unit displayBoard:procedure;
begin
 call GUI_Clear;
 call GUI_Rect(0, 0, winWidth, winHeight, borderColor, bgColor);
end displayBoard;
(**)
unit displayEndMsg:procedure(msg:string);
var tmpHeight, tmpWidth:integer;
begin
 call GUI_Clear;
 call GUI_Rect(0, 0, winWidth, winHeight, borderColor, infoBgColor);
 tmpHeight := (winHeight - menuHeight)/2;
 tmpWidth := (winWidth - menuWidth)/2;
 call GUI_Rect(tmpWidth, tmpHeight, winWidth - tmpWidth, 
 winHeight - tmpHeight, borderColor, infoFgColor);
 call GUI_Rect(tmpWidth, tmpHeight, winWidth - tmpWidth, 
 winHeight - tmpHeight, borderColor, infoFgColor);
 call GUI_WriteText((tmpWidth + 110), (winHeight/2) - 10, 
 unpack(msg), infoTextColor, infoFgColor);
 call endrun;
end displayEndMsg;
(*Pause and read key. Version 1.*)
unit pauseFor:procedure; 
begin
 key := 0;
 for i := 0 to speed do
  tmp := inkey;
  if tmp =/= 0 then key:=tmp fi;
 od;
 if key=27 then call endrun fi;
end pauseFor;
(*Pause and read key. Version 2.*)
unit pauseFor2:procedure(cycles:integer);
begin
 key := 0;
 for i := 0 to cycles do
  tmp := inkey;
  if tmp =/= 0 then key:=tmp fi;
 od;
 if key=27 then call endrun fi;
end pauseFor2;
(*Pause and read key. Version 3.*)
unit pauseFor3:procedure(cycles:integer; output keyp:integer);
begin
 (*Not implemented yet.*)
 (*Use time function to adjust game moves.*)
end pauseFor3;
(**)
begin
 return;
end gameBoard;
(*Global variables.*)
var game:gameBoard;
var key, speed:integer;
var gBricks:bricks;
var gBall:ball;
var gPaddle:paddle;
var brickCollision:boolean;
(*Main program.*)
begin
 speed := defaultSpeed;
 game := new gameBoard;
 call game.info(key);
 case key
  when 32: call game.configure(speed); (*SPACEBAR*)
  when 27: call endrun; (*ESCAPE*)
  otherwise ; (*ENTER or other key*)
 esac;
 call game.displayBoard;
 gBricks := new bricks;
 gBall := new ball;
 gPaddle := new paddle;
 do (*Main loop.*)
  call game.pauseFor;
  call gBall.move;
  call gPaddle.move;
  call gBricks.collisionDetect;
 od;
end.